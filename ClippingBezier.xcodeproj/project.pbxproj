// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXBuildFile section */
		664CC9B21A8C1FED00E77887 /* BezierClipStatic-Prefix.pch in Headers */ = {isa = PBXBuildFile; fileRef = 664CC9B11A8C1FED00E77887 /* BezierClipStatic-Prefix.pch */; };
		664CC9B41A8C1FED00E77887 /* BezierClipStatic-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = 664CC9B31A8C1FED00E77887 /* BezierClipStatic-Info.plist */; };
		664CC9B61A8C1FED00E77887 /* BezierClipStatic.h in Headers */ = {isa = PBXBuildFile; fileRef = 664CC9B51A8C1FED00E77887 /* BezierClipStatic.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9B81A8C1FED00E77887 /* BezierClipStatic.m in Sources */ = {isa = PBXBuildFile; fileRef = 664CC9B71A8C1FED00E77887 /* BezierClipStatic.m */; };
		664CC9C61A8C200900E77887 /* DKUIBezierPathClippedSegment.m in Sources */ = {isa = PBXBuildFile; fileRef = 6682879B1A893DDD0038A1C4 /* DKUIBezierPathClippedSegment.m */; };
		664CC9C71A8C200900E77887 /* DKUIBezierPathClippingResult.m in Sources */ = {isa = PBXBuildFile; fileRef = 6682879D1A893DDD0038A1C4 /* DKUIBezierPathClippingResult.m */; };
		664CC9C81A8C200900E77887 /* DKUIBezierPathIntersectionPoint.m in Sources */ = {isa = PBXBuildFile; fileRef = 668287A01A893DDD0038A1C4 /* DKUIBezierPathIntersectionPoint.m */; };
		664CC9C91A8C200900E77887 /* DKUIBezierUnmatchedPathIntersectionPoint.m in Sources */ = {isa = PBXBuildFile; fileRef = 668287A21A893DDD0038A1C4 /* DKUIBezierUnmatchedPathIntersectionPoint.m */; };
		664CC9CA1A8C200900E77887 /* DKUIBezierPathShape.m in Sources */ = {isa = PBXBuildFile; fileRef = 668287A41A893DDD0038A1C4 /* DKUIBezierPathShape.m */; };
		664CC9CB1A8C200900E77887 /* DKTangentAtPoint.m in Sources */ = {isa = PBXBuildFile; fileRef = 668287A61A893DDD0038A1C4 /* DKTangentAtPoint.m */; };
		664CC9CC1A8C200900E77887 /* MMFooBar.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD532D1A89523400E7B486 /* MMFooBar.m */; };
		664CC9CD1A8C200900E77887 /* DKIntersectionOfPaths.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD53311A89546A00E7B486 /* DKIntersectionOfPaths.m */; };
		664CC9CE1A8C200C00E77887 /* UIBezierPath+Clipping.mm in Sources */ = {isa = PBXBuildFile; fileRef = 668288521A893F7E0038A1C4 /* UIBezierPath+Clipping.mm */; };
		664CC9CF1A8C200C00E77887 /* UIBezierPath+GeometryExtras.m in Sources */ = {isa = PBXBuildFile; fileRef = 668288541A893F7E0038A1C4 /* UIBezierPath+GeometryExtras.m */; };
		664CC9D01A8C200C00E77887 /* UIBezierPath+DKOSX.m in Sources */ = {isa = PBXBuildFile; fileRef = 668288561A893F7E0038A1C4 /* UIBezierPath+DKOSX.m */; };
		664CC9D11A8C200D00E77887 /* UIBezierPath+Intersections.m in Sources */ = {isa = PBXBuildFile; fileRef = 668288581A893F7E0038A1C4 /* UIBezierPath+Intersections.m */; };
		664CC9D21A8C200D00E77887 /* NSArray+FirstObject.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD53011A894BA800E7B486 /* NSArray+FirstObject.m */; };
		664CC9D31A8C201100E77887 /* DKVector.m in Sources */ = {isa = PBXBuildFile; fileRef = 668288121A893F060038A1C4 /* DKVector.m */; };
		664CC9D41A8C201100E77887 /* JRSwizzle.m in Sources */ = {isa = PBXBuildFile; fileRef = 668288451A893F5A0038A1C4 /* JRSwizzle.m */; };
		664CC9D51A8C201100E77887 /* MMBackwardCompatible.m in Sources */ = {isa = PBXBuildFile; fileRef = 668288471A893F5A0038A1C4 /* MMBackwardCompatible.m */; };
		664CC9D61A8C205000E77887 /* BezierClip.h in Headers */ = {isa = PBXBuildFile; fileRef = 668287911A893CE50038A1C4 /* BezierClip.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9D71A8C205200E77887 /* interval.h in Headers */ = {isa = PBXBuildFile; fileRef = 668287B41A893DE90038A1C4 /* interval.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9D81A8C205400E77887 /* DKVector.h in Headers */ = {isa = PBXBuildFile; fileRef = 668288111A893F060038A1C4 /* DKVector.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9D91A8C205600E77887 /* JRSwizzle.h in Headers */ = {isa = PBXBuildFile; fileRef = 668288441A893F5A0038A1C4 /* JRSwizzle.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9DA1A8C205800E77887 /* MMBackwardCompatible.h in Headers */ = {isa = PBXBuildFile; fileRef = 668288461A893F5A0038A1C4 /* MMBackwardCompatible.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9DB1A8C205900E77887 /* gauss.hxx in Headers */ = {isa = PBXBuildFile; fileRef = 668288191A893F200038A1C4 /* gauss.hxx */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9DC1A8C205A00E77887 /* bezierclip.hxx in Headers */ = {isa = PBXBuildFile; fileRef = 668288171A893F200038A1C4 /* bezierclip.hxx */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9DD1A8C205F00E77887 /* UIBezierPath+Clipping.h in Headers */ = {isa = PBXBuildFile; fileRef = 668288501A893F7E0038A1C4 /* UIBezierPath+Clipping.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9DE1A8C205F00E77887 /* UIBezierPath+Clipping_Private.h in Headers */ = {isa = PBXBuildFile; fileRef = 668288511A893F7E0038A1C4 /* UIBezierPath+Clipping_Private.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9DF1A8C205F00E77887 /* UIBezierPath+GeometryExtras.h in Headers */ = {isa = PBXBuildFile; fileRef = 668288531A893F7E0038A1C4 /* UIBezierPath+GeometryExtras.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E01A8C205F00E77887 /* UIBezierPath+DKOSX.h in Headers */ = {isa = PBXBuildFile; fileRef = 668288551A893F7E0038A1C4 /* UIBezierPath+DKOSX.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E11A8C205F00E77887 /* UIBezierPath+Intersections.h in Headers */ = {isa = PBXBuildFile; fileRef = 668288571A893F7E0038A1C4 /* UIBezierPath+Intersections.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E21A8C205F00E77887 /* NSArray+FirstObject.h in Headers */ = {isa = PBXBuildFile; fileRef = 66FD53001A894BA800E7B486 /* NSArray+FirstObject.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E31A8C206500E77887 /* DKUIBezierPathClippedSegment.h in Headers */ = {isa = PBXBuildFile; fileRef = 6682879A1A893DDD0038A1C4 /* DKUIBezierPathClippedSegment.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E41A8C206500E77887 /* DKUIBezierPathClippingResult.h in Headers */ = {isa = PBXBuildFile; fileRef = 6682879C1A893DDD0038A1C4 /* DKUIBezierPathClippingResult.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E51A8C206500E77887 /* DKUIBezierPathIntersectionPoint.h in Headers */ = {isa = PBXBuildFile; fileRef = 6682879E1A893DDD0038A1C4 /* DKUIBezierPathIntersectionPoint.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E61A8C206500E77887 /* DKUIBezierPathIntersectionPoint+Private.h in Headers */ = {isa = PBXBuildFile; fileRef = 6682879F1A893DDD0038A1C4 /* DKUIBezierPathIntersectionPoint+Private.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E71A8C206500E77887 /* DKUIBezierUnmatchedPathIntersectionPoint.h in Headers */ = {isa = PBXBuildFile; fileRef = 668287A11A893DDD0038A1C4 /* DKUIBezierUnmatchedPathIntersectionPoint.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E81A8C206500E77887 /* DKUIBezierPathShape.h in Headers */ = {isa = PBXBuildFile; fileRef = 668287A31A893DDD0038A1C4 /* DKUIBezierPathShape.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9E91A8C206500E77887 /* DKTangentAtPoint.h in Headers */ = {isa = PBXBuildFile; fileRef = 668287A51A893DDD0038A1C4 /* DKTangentAtPoint.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9EA1A8C206500E77887 /* MMFooBar.h in Headers */ = {isa = PBXBuildFile; fileRef = 66FD532C1A89523400E7B486 /* MMFooBar.h */; settings = {ATTRIBUTES = (Public, ); }; };
		664CC9EB1A8C206500E77887 /* DKIntersectionOfPaths.h in Headers */ = {isa = PBXBuildFile; fileRef = 66FD53301A89546A00E7B486 /* DKIntersectionOfPaths.h */; settings = {ATTRIBUTES = (Public, ); }; };
		66B9D1F01A8C28C200CAC341 /* ClippingBezier.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 664CC9AC1A8C1FED00E77887 /* ClippingBezier.framework */; };
		66B9D1F11A8C28FC00CAC341 /* DrawKit-iOS.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 66C3228E1A8C2416004B4972 /* DrawKit-iOS.framework */; };
		66B9D1F21A8C28FC00CAC341 /* PerformanceBezier.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 66C3228F1A8C2416004B4972 /* PerformanceBezier.framework */; };
		66B9D1F41A8C2B0B00CAC341 /* CoreGraphics.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 66B9D1F31A8C2B0B00CAC341 /* CoreGraphics.framework */; };
		66B9D1F61A8C2B1800CAC341 /* UIKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 66B9D1F51A8C2B1800CAC341 /* UIKit.framework */; };
		66C322901A8C2416004B4972 /* DrawKit-iOS.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 66C3228E1A8C2416004B4972 /* DrawKit-iOS.framework */; };
		66C322911A8C2416004B4972 /* PerformanceBezier.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 66C3228F1A8C2416004B4972 /* PerformanceBezier.framework */; };
		66FD531F1A894C7A00E7B486 /* DrawKitiOSAOOTests.mm in Sources */ = {isa = PBXBuildFile; fileRef = 66FD53141A894C7A00E7B486 /* DrawKitiOSAOOTests.mm */; };
		66FD53201A894C7A00E7B486 /* DrawKitiOSAbstractTest.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD53161A894C7A00E7B486 /* DrawKitiOSAbstractTest.m */; };
		66FD53211A894C7A00E7B486 /* DrawKitiOSClippingIntersectionTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD53171A894C7A00E7B486 /* DrawKitiOSClippingIntersectionTests.m */; };
		66FD53221A894C7A00E7B486 /* DrawKitiOSClippingSegmentTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD53181A894C7A00E7B486 /* DrawKitiOSClippingSegmentTests.m */; };
		66FD53231A894C7A00E7B486 /* DrawKitiOSClippingSegmentTangentTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD53191A894C7A00E7B486 /* DrawKitiOSClippingSegmentTangentTests.m */; };
		66FD53241A894C7A00E7B486 /* DrawKitiOSClippingPerformanceTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD531A1A894C7A00E7B486 /* DrawKitiOSClippingPerformanceTests.m */; };
		66FD53251A894C7A00E7B486 /* DrawKitiOSClippingSubshapeTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD531B1A894C7A00E7B486 /* DrawKitiOSClippingSubshapeTests.m */; };
		66FD53261A894C7A00E7B486 /* DrawKitiOSReverseBezierTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD531C1A894C7A00E7B486 /* DrawKitiOSReverseBezierTests.m */; };
		66FD53281A894C7A00E7B486 /* DrawKitiOSFlatTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD531E1A894C7A00E7B486 /* DrawKitiOSFlatTests.m */; };
		66FD532B1A89512200E7B486 /* DrawKitiOSFastFlatTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 66FD531D1A894C7A00E7B486 /* DrawKitiOSFastFlatTests.m */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		664CC9AC1A8C1FED00E77887 /* ClippingBezier.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework.static; includeInIndex = 0; path = ClippingBezier.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		664CC9B01A8C1FED00E77887 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
		664CC9B11A8C1FED00E77887 /* BezierClipStatic-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "BezierClipStatic-Prefix.pch"; sourceTree = "<group>"; };
		664CC9B31A8C1FED00E77887 /* BezierClipStatic-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "BezierClipStatic-Info.plist"; sourceTree = "<group>"; };
		664CC9B51A8C1FED00E77887 /* BezierClipStatic.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = BezierClipStatic.h; sourceTree = "<group>"; };
		664CC9B71A8C1FED00E77887 /* BezierClipStatic.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = BezierClipStatic.m; sourceTree = "<group>"; };
		664CC9EC1A8C208E00E77887 /* DrawKit-iOS.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = "DrawKit-iOS.framework"; path = "../../LooseLeaf/Submodules/DrawKit-iOS/build/Debug-iphoneos/DrawKit-iOS.framework"; sourceTree = "<group>"; };
		664CC9EE1A8C209200E77887 /* PerformanceBezier.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = PerformanceBezier.framework; path = "../../LooseLeaf/Submodules/PerformanceBezier/build/Debug-iphoneos/PerformanceBezier.framework"; sourceTree = "<group>"; };
		668287881A893CE50038A1C4 /* Foundation.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Foundation.framework; path = /System/Library/Frameworks/Foundation.framework; sourceTree = "<absolute>"; };
		668287911A893CE50038A1C4 /* BezierClip.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = BezierClip.h; sourceTree = "<group>"; };
		6682879A1A893DDD0038A1C4 /* DKUIBezierPathClippedSegment.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DKUIBezierPathClippedSegment.h; sourceTree = "<group>"; };
		6682879B1A893DDD0038A1C4 /* DKUIBezierPathClippedSegment.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = DKUIBezierPathClippedSegment.m; sourceTree = "<group>"; };
		6682879C1A893DDD0038A1C4 /* DKUIBezierPathClippingResult.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DKUIBezierPathClippingResult.h; sourceTree = "<group>"; };
		6682879D1A893DDD0038A1C4 /* DKUIBezierPathClippingResult.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = DKUIBezierPathClippingResult.m; sourceTree = "<group>"; };
		6682879E1A893DDD0038A1C4 /* DKUIBezierPathIntersectionPoint.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DKUIBezierPathIntersectionPoint.h; sourceTree = "<group>"; };
		6682879F1A893DDD0038A1C4 /* DKUIBezierPathIntersectionPoint+Private.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "DKUIBezierPathIntersectionPoint+Private.h"; sourceTree = "<group>"; };
		668287A01A893DDD0038A1C4 /* DKUIBezierPathIntersectionPoint.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = DKUIBezierPathIntersectionPoint.m; sourceTree = "<group>"; };
		668287A11A893DDD0038A1C4 /* DKUIBezierUnmatchedPathIntersectionPoint.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DKUIBezierUnmatchedPathIntersectionPoint.h; sourceTree = "<group>"; };
		668287A21A893DDD0038A1C4 /* DKUIBezierUnmatchedPathIntersectionPoint.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = DKUIBezierUnmatchedPathIntersectionPoint.m; sourceTree = "<group>"; };
		668287A31A893DDD0038A1C4 /* DKUIBezierPathShape.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DKUIBezierPathShape.h; sourceTree = "<group>"; };
		668287A41A893DDD0038A1C4 /* DKUIBezierPathShape.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = DKUIBezierPathShape.m; sourceTree = "<group>"; };
		668287A51A893DDD0038A1C4 /* DKTangentAtPoint.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DKTangentAtPoint.h; sourceTree = "<group>"; };
		668287A61A893DDD0038A1C4 /* DKTangentAtPoint.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = DKTangentAtPoint.m; sourceTree = "<group>"; };
		668287B41A893DE90038A1C4 /* interval.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = interval.h; sourceTree = "<group>"; };
		668288111A893F060038A1C4 /* DKVector.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DKVector.h; sourceTree = "<group>"; };
		668288121A893F060038A1C4 /* DKVector.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = DKVector.m; sourceTree = "<group>"; };
		668288161A893F200038A1C4 /* bezierclip.cxx */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = bezierclip.cxx; sourceTree = "<group>"; };
		668288171A893F200038A1C4 /* bezierclip.hxx */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; path = bezierclip.hxx; sourceTree = "<group>"; };
		668288181A893F200038A1C4 /* convexhull.cxx */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.cpp; path = convexhull.cxx; sourceTree = "<group>"; };
		668288191A893F200038A1C4 /* gauss.hxx */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.h; path = gauss.hxx; sourceTree = "<group>"; };
		668288441A893F5A0038A1C4 /* JRSwizzle.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = JRSwizzle.h; sourceTree = "<group>"; };
		668288451A893F5A0038A1C4 /* JRSwizzle.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = JRSwizzle.m; sourceTree = "<group>"; };
		668288461A893F5A0038A1C4 /* MMBackwardCompatible.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MMBackwardCompatible.h; sourceTree = "<group>"; };
		668288471A893F5A0038A1C4 /* MMBackwardCompatible.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = MMBackwardCompatible.m; sourceTree = "<group>"; };
		668288501A893F7E0038A1C4 /* UIBezierPath+Clipping.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "UIBezierPath+Clipping.h"; sourceTree = "<group>"; };
		668288511A893F7E0038A1C4 /* UIBezierPath+Clipping_Private.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "UIBezierPath+Clipping_Private.h"; sourceTree = "<group>"; };
		668288521A893F7E0038A1C4 /* UIBezierPath+Clipping.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = "UIBezierPath+Clipping.mm"; sourceTree = "<group>"; };
		668288531A893F7E0038A1C4 /* UIBezierPath+GeometryExtras.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "UIBezierPath+GeometryExtras.h"; sourceTree = "<group>"; };
		668288541A893F7E0038A1C4 /* UIBezierPath+GeometryExtras.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "UIBezierPath+GeometryExtras.m"; sourceTree = "<group>"; };
		668288551A893F7E0038A1C4 /* UIBezierPath+DKOSX.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "UIBezierPath+DKOSX.h"; sourceTree = "<group>"; };
		668288561A893F7E0038A1C4 /* UIBezierPath+DKOSX.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "UIBezierPath+DKOSX.m"; sourceTree = "<group>"; };
		668288571A893F7E0038A1C4 /* UIBezierPath+Intersections.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "UIBezierPath+Intersections.h"; sourceTree = "<group>"; };
		668288581A893F7E0038A1C4 /* UIBezierPath+Intersections.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = "UIBezierPath+Intersections.m"; sourceTree = "<group>"; };
		66B9D1EE1A8C28BA00CAC341 /* PerformanceBezier.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = PerformanceBezier.framework; path = "../PerformanceBezier/build/Debug-iphoneos/PerformanceBezier.framework"; sourceTree = "<group>"; };
		66B9D1F31A8C2B0B00CAC341 /* CoreGraphics.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = CoreGraphics.framework; path = System/Library/Frameworks/CoreGraphics.framework; sourceTree = SDKROOT; };
		66B9D1F51A8C2B1800CAC341 /* UIKit.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = UIKit.framework; path = System/Library/Frameworks/UIKit.framework; sourceTree = SDKROOT; };
		66C3226C1A8C2323004B4972 /* DrawKit-iOS.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = "DrawKit-iOS.framework"; path = "../../../../../../Library/Developer/Xcode/DerivedData/Submodules-gtusjeclzeiqvohcggijqwyhvaui/Build/Products/Debug-iphoneos/DrawKit-iOS.framework"; sourceTree = "<group>"; };
		66C3226E1A8C2326004B4972 /* PerformanceBezier.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = PerformanceBezier.framework; path = "../../../../../../Library/Developer/Xcode/DerivedData/Submodules-gtusjeclzeiqvohcggijqwyhvaui/Build/Products/Debug-iphoneos/PerformanceBezier.framework"; sourceTree = "<group>"; };
		66C3228E1A8C2416004B4972 /* DrawKit-iOS.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = "DrawKit-iOS.framework"; path = "../../../../../../Library/Developer/Xcode/DerivedData/Submodules-atjowsbrivaldqblxffjhatdorwq/Build/Products/Debug-iphoneos/DrawKit-iOS.framework"; sourceTree = "<group>"; };
		66C3228F1A8C2416004B4972 /* PerformanceBezier.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = PerformanceBezier.framework; path = "../../../../../../Library/Developer/Xcode/DerivedData/Submodules-atjowsbrivaldqblxffjhatdorwq/Build/Products/Debug-iphoneos/PerformanceBezier.framework"; sourceTree = "<group>"; };
		66FD52BA1A89496C00E7B486 /* DrawKit-iOS.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = "DrawKit-iOS.framework"; path = "../../../../../Library/Developer/Xcode/DerivedData/Livestream-fbfhkounuymzsmhkjcmbzrpkghri/Build/Products/Debug-iphoneos/DrawKit-iOS.framework"; sourceTree = "<group>"; };
		66FD52BB1A89496C00E7B486 /* PerformanceBezier.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = PerformanceBezier.framework; path = "../../../../../Library/Developer/Xcode/DerivedData/Livestream-fbfhkounuymzsmhkjcmbzrpkghri/Build/Products/Debug-iphoneos/PerformanceBezier.framework"; sourceTree = "<group>"; };
		66FD53001A894BA800E7B486 /* NSArray+FirstObject.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "NSArray+FirstObject.h"; sourceTree = "<group>"; };
		66FD53011A894BA800E7B486 /* NSArray+FirstObject.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = "NSArray+FirstObject.m"; sourceTree = "<group>"; };
		66FD53081A894C5600E7B486 /* ClippingBezierTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = ClippingBezierTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		66FD530B1A894C5600E7B486 /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
		66FD53141A894C7A00E7B486 /* DrawKitiOSAOOTests.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = DrawKitiOSAOOTests.mm; sourceTree = "<group>"; };
		66FD53151A894C7A00E7B486 /* DrawKitiOSAbstractTest.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DrawKitiOSAbstractTest.h; sourceTree = "<group>"; };
		66FD53161A894C7A00E7B486 /* DrawKitiOSAbstractTest.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = DrawKitiOSAbstractTest.m; sourceTree = "<group>"; };
		66FD53171A894C7A00E7B486 /* DrawKitiOSClippingIntersectionTests.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = DrawKitiOSClippingIntersectionTests.m; sourceTree = "<group>"; };
		66FD53181A894C7A00E7B486 /* DrawKitiOSClippingSegmentTests.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = DrawKitiOSClippingSegmentTests.m; sourceTree = "<group>"; };
		66FD53191A894C7A00E7B486 /* DrawKitiOSClippingSegmentTangentTests.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = DrawKitiOSClippingSegmentTangentTests.m; sourceTree = "<group>"; };
		66FD531A1A894C7A00E7B486 /* DrawKitiOSClippingPerformanceTests.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = DrawKitiOSClippingPerformanceTests.m; sourceTree = "<group>"; };
		66FD531B1A894C7A00E7B486 /* DrawKitiOSClippingSubshapeTests.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = DrawKitiOSClippingSubshapeTests.m; sourceTree = "<group>"; };
		66FD531C1A894C7A00E7B486 /* DrawKitiOSReverseBezierTests.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = DrawKitiOSReverseBezierTests.m; sourceTree = "<group>"; };
		66FD531D1A894C7A00E7B486 /* DrawKitiOSFastFlatTests.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = DrawKitiOSFastFlatTests.m; sourceTree = "<group>"; };
		66FD531E1A894C7A00E7B486 /* DrawKitiOSFlatTests.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = DrawKitiOSFlatTests.m; sourceTree = "<group>"; };
		66FD532C1A89523400E7B486 /* MMFooBar.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MMFooBar.h; sourceTree = "<group>"; };
		66FD532D1A89523400E7B486 /* MMFooBar.m */ = {isa = PBXFileReference; explicitFileType = sourcecode.cpp.objcpp; fileEncoding = 4; path = MMFooBar.m; sourceTree = "<group>"; };
		66FD53301A89546A00E7B486 /* DKIntersectionOfPaths.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = DKIntersectionOfPaths.h; sourceTree = "<group>"; };
		66FD53311A89546A00E7B486 /* DKIntersectionOfPaths.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = DKIntersectionOfPaths.m; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		664CC9A71A8C1FED00E77887 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				66C322901A8C2416004B4972 /* DrawKit-iOS.framework in Frameworks */,
				66C322911A8C2416004B4972 /* PerformanceBezier.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		66FD53051A894C5600E7B486 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				66B9D1F61A8C2B1800CAC341 /* UIKit.framework in Frameworks */,
				66B9D1F41A8C2B0B00CAC341 /* CoreGraphics.framework in Frameworks */,
				66B9D1F11A8C28FC00CAC341 /* DrawKit-iOS.framework in Frameworks */,
				66B9D1F21A8C28FC00CAC341 /* PerformanceBezier.framework in Frameworks */,
				66B9D1F01A8C28C200CAC341 /* ClippingBezier.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		664CC9AE1A8C1FED00E77887 /* BezierClipStatic */ = {
			isa = PBXGroup;
			children = (
				664CC9B11A8C1FED00E77887 /* BezierClipStatic-Prefix.pch */,
				664CC9B31A8C1FED00E77887 /* BezierClipStatic-Info.plist */,
				664CC9B01A8C1FED00E77887 /* Info.plist */,
				664CC9B51A8C1FED00E77887 /* BezierClipStatic.h */,
				664CC9B71A8C1FED00E77887 /* BezierClipStatic.m */,
			);
			path = BezierClipStatic;
			sourceTree = "<group>";
		};
		668287781A893CC70038A1C4 = {
			isa = PBXGroup;
			children = (
				6682878A1A893CE50038A1C4 /* BezierClip */,
				66FD53091A894C5600E7B486 /* BezierClipTests */,
				664CC9AE1A8C1FED00E77887 /* BezierClipStatic */,
				668287871A893CE50038A1C4 /* Frameworks */,
				668287861A893CE50038A1C4 /* Products */,
			);
			sourceTree = "<group>";
		};
		668287861A893CE50038A1C4 /* Products */ = {
			isa = PBXGroup;
			children = (
				66FD53081A894C5600E7B486 /* ClippingBezierTests.xctest */,
				664CC9AC1A8C1FED00E77887 /* ClippingBezier.framework */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		668287871A893CE50038A1C4 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				66B9D1F51A8C2B1800CAC341 /* UIKit.framework */,
				66B9D1F31A8C2B0B00CAC341 /* CoreGraphics.framework */,
				66B9D1EE1A8C28BA00CAC341 /* PerformanceBezier.framework */,
				66C3228E1A8C2416004B4972 /* DrawKit-iOS.framework */,
				66C3228F1A8C2416004B4972 /* PerformanceBezier.framework */,
				66C3226E1A8C2326004B4972 /* PerformanceBezier.framework */,
				66C3226C1A8C2323004B4972 /* DrawKit-iOS.framework */,
				664CC9EE1A8C209200E77887 /* PerformanceBezier.framework */,
				664CC9EC1A8C208E00E77887 /* DrawKit-iOS.framework */,
				66FD52BA1A89496C00E7B486 /* DrawKit-iOS.framework */,
				66FD52BB1A89496C00E7B486 /* PerformanceBezier.framework */,
				668287881A893CE50038A1C4 /* Foundation.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		6682878A1A893CE50038A1C4 /* BezierClip */ = {
			isa = PBXGroup;
			children = (
				668287911A893CE50038A1C4 /* BezierClip.h */,
				668287B41A893DE90038A1C4 /* interval.h */,
				668288101A893EFA0038A1C4 /* Vector */,
				668288431A893F530038A1C4 /* JRSwizzle */,
				668288151A893F170038A1C4 /* BaseGFX Bezier Clip */,
				6682884C1A893F750038A1C4 /* Categories */,
				668287991A893DD10038A1C4 /* Classes */,
			);
			path = BezierClip;
			sourceTree = "<group>";
		};
		668287991A893DD10038A1C4 /* Classes */ = {
			isa = PBXGroup;
			children = (
				6682879A1A893DDD0038A1C4 /* DKUIBezierPathClippedSegment.h */,
				6682879B1A893DDD0038A1C4 /* DKUIBezierPathClippedSegment.m */,
				6682879C1A893DDD0038A1C4 /* DKUIBezierPathClippingResult.h */,
				6682879D1A893DDD0038A1C4 /* DKUIBezierPathClippingResult.m */,
				6682879E1A893DDD0038A1C4 /* DKUIBezierPathIntersectionPoint.h */,
				6682879F1A893DDD0038A1C4 /* DKUIBezierPathIntersectionPoint+Private.h */,
				668287A01A893DDD0038A1C4 /* DKUIBezierPathIntersectionPoint.m */,
				668287A11A893DDD0038A1C4 /* DKUIBezierUnmatchedPathIntersectionPoint.h */,
				668287A21A893DDD0038A1C4 /* DKUIBezierUnmatchedPathIntersectionPoint.m */,
				668287A31A893DDD0038A1C4 /* DKUIBezierPathShape.h */,
				668287A41A893DDD0038A1C4 /* DKUIBezierPathShape.m */,
				668287A51A893DDD0038A1C4 /* DKTangentAtPoint.h */,
				668287A61A893DDD0038A1C4 /* DKTangentAtPoint.m */,
				66FD532C1A89523400E7B486 /* MMFooBar.h */,
				66FD532D1A89523400E7B486 /* MMFooBar.m */,
				66FD53301A89546A00E7B486 /* DKIntersectionOfPaths.h */,
				66FD53311A89546A00E7B486 /* DKIntersectionOfPaths.m */,
			);
			name = Classes;
			sourceTree = "<group>";
		};
		668288101A893EFA0038A1C4 /* Vector */ = {
			isa = PBXGroup;
			children = (
				668288111A893F060038A1C4 /* DKVector.h */,
				668288121A893F060038A1C4 /* DKVector.m */,
			);
			name = Vector;
			sourceTree = "<group>";
		};
		668288151A893F170038A1C4 /* BaseGFX Bezier Clip */ = {
			isa = PBXGroup;
			children = (
				668288191A893F200038A1C4 /* gauss.hxx */,
				668288171A893F200038A1C4 /* bezierclip.hxx */,
				668288161A893F200038A1C4 /* bezierclip.cxx */,
				668288181A893F200038A1C4 /* convexhull.cxx */,
			);
			name = "BaseGFX Bezier Clip";
			sourceTree = "<group>";
		};
		668288431A893F530038A1C4 /* JRSwizzle */ = {
			isa = PBXGroup;
			children = (
				668288441A893F5A0038A1C4 /* JRSwizzle.h */,
				668288451A893F5A0038A1C4 /* JRSwizzle.m */,
				668288461A893F5A0038A1C4 /* MMBackwardCompatible.h */,
				668288471A893F5A0038A1C4 /* MMBackwardCompatible.m */,
			);
			name = JRSwizzle;
			sourceTree = "<group>";
		};
		6682884C1A893F750038A1C4 /* Categories */ = {
			isa = PBXGroup;
			children = (
				668288501A893F7E0038A1C4 /* UIBezierPath+Clipping.h */,
				668288511A893F7E0038A1C4 /* UIBezierPath+Clipping_Private.h */,
				668288521A893F7E0038A1C4 /* UIBezierPath+Clipping.mm */,
				668288531A893F7E0038A1C4 /* UIBezierPath+GeometryExtras.h */,
				668288541A893F7E0038A1C4 /* UIBezierPath+GeometryExtras.m */,
				668288551A893F7E0038A1C4 /* UIBezierPath+DKOSX.h */,
				668288561A893F7E0038A1C4 /* UIBezierPath+DKOSX.m */,
				668288571A893F7E0038A1C4 /* UIBezierPath+Intersections.h */,
				668288581A893F7E0038A1C4 /* UIBezierPath+Intersections.m */,
				66FD53001A894BA800E7B486 /* NSArray+FirstObject.h */,
				66FD53011A894BA800E7B486 /* NSArray+FirstObject.m */,
			);
			name = Categories;
			sourceTree = "<group>";
		};
		66FD53091A894C5600E7B486 /* BezierClipTests */ = {
			isa = PBXGroup;
			children = (
				66FD53141A894C7A00E7B486 /* DrawKitiOSAOOTests.mm */,
				66FD53151A894C7A00E7B486 /* DrawKitiOSAbstractTest.h */,
				66FD53161A894C7A00E7B486 /* DrawKitiOSAbstractTest.m */,
				66FD53171A894C7A00E7B486 /* DrawKitiOSClippingIntersectionTests.m */,
				66FD53181A894C7A00E7B486 /* DrawKitiOSClippingSegmentTests.m */,
				66FD53191A894C7A00E7B486 /* DrawKitiOSClippingSegmentTangentTests.m */,
				66FD531A1A894C7A00E7B486 /* DrawKitiOSClippingPerformanceTests.m */,
				66FD531B1A894C7A00E7B486 /* DrawKitiOSClippingSubshapeTests.m */,
				66FD531C1A894C7A00E7B486 /* DrawKitiOSReverseBezierTests.m */,
				66FD531D1A894C7A00E7B486 /* DrawKitiOSFastFlatTests.m */,
				66FD531E1A894C7A00E7B486 /* DrawKitiOSFlatTests.m */,
				66FD530A1A894C5600E7B486 /* Supporting Files */,
			);
			path = BezierClipTests;
			sourceTree = "<group>";
		};
		66FD530A1A894C5600E7B486 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				66FD530B1A894C5600E7B486 /* Info.plist */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXHeadersBuildPhase section */
		664CC9A81A8C1FED00E77887 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				664CC9D61A8C205000E77887 /* BezierClip.h in Headers */,
				664CC9DD1A8C205F00E77887 /* UIBezierPath+Clipping.h in Headers */,
				664CC9DE1A8C205F00E77887 /* UIBezierPath+Clipping_Private.h in Headers */,
				664CC9DF1A8C205F00E77887 /* UIBezierPath+GeometryExtras.h in Headers */,
				664CC9E31A8C206500E77887 /* DKUIBezierPathClippedSegment.h in Headers */,
				664CC9E41A8C206500E77887 /* DKUIBezierPathClippingResult.h in Headers */,
				664CC9B61A8C1FED00E77887 /* BezierClipStatic.h in Headers */,
				664CC9E51A8C206500E77887 /* DKUIBezierPathIntersectionPoint.h in Headers */,
				664CC9E61A8C206500E77887 /* DKUIBezierPathIntersectionPoint+Private.h in Headers */,
				664CC9E71A8C206500E77887 /* DKUIBezierUnmatchedPathIntersectionPoint.h in Headers */,
				664CC9E81A8C206500E77887 /* DKUIBezierPathShape.h in Headers */,
				664CC9E91A8C206500E77887 /* DKTangentAtPoint.h in Headers */,
				664CC9EA1A8C206500E77887 /* MMFooBar.h in Headers */,
				664CC9EB1A8C206500E77887 /* DKIntersectionOfPaths.h in Headers */,
				664CC9E01A8C205F00E77887 /* UIBezierPath+DKOSX.h in Headers */,
				664CC9E11A8C205F00E77887 /* UIBezierPath+Intersections.h in Headers */,
				664CC9E21A8C205F00E77887 /* NSArray+FirstObject.h in Headers */,
				664CC9DA1A8C205800E77887 /* MMBackwardCompatible.h in Headers */,
				664CC9DC1A8C205A00E77887 /* bezierclip.hxx in Headers */,
				664CC9DB1A8C205900E77887 /* gauss.hxx in Headers */,
				664CC9D71A8C205200E77887 /* interval.h in Headers */,
				664CC9D91A8C205600E77887 /* JRSwizzle.h in Headers */,
				664CC9D81A8C205400E77887 /* DKVector.h in Headers */,
				664CC9B21A8C1FED00E77887 /* BezierClipStatic-Prefix.pch in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXHeadersBuildPhase section */

/* Begin PBXNativeTarget section */
		664CC9AB1A8C1FED00E77887 /* ClippingBezier */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 664CC9B91A8C1FED00E77887 /* Build configuration list for PBXNativeTarget "ClippingBezier" */;
			buildPhases = (
				664CC9A61A8C1FED00E77887 /* Sources */,
				664CC9A71A8C1FED00E77887 /* Frameworks */,
				664CC9A81A8C1FED00E77887 /* Headers */,
				664CC9A91A8C1FED00E77887 /* Resources */,
				664CC9AA1A8C1FED00E77887 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = ClippingBezier;
			productName = BezierClipStatic;
			productReference = 664CC9AC1A8C1FED00E77887 /* ClippingBezier.framework */;
			productType = "com.apple.product-type.framework.static";
		};
		66FD53071A894C5600E7B486 /* ClippingBezierTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 66FD53111A894C5600E7B486 /* Build configuration list for PBXNativeTarget "ClippingBezierTests" */;
			buildPhases = (
				66FD53041A894C5600E7B486 /* Sources */,
				66FD53051A894C5600E7B486 /* Frameworks */,
				66FD53061A894C5600E7B486 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = ClippingBezierTests;
			productName = BezierClipTests;
			productReference = 66FD53081A894C5600E7B486 /* ClippingBezierTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		668287791A893CC70038A1C4 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 0610;
				TargetAttributes = {
					664CC9AB1A8C1FED00E77887 = {
						CreatedOnToolsVersion = 6.1.1;
					};
					66FD53071A894C5600E7B486 = {
						CreatedOnToolsVersion = 6.1.1;
					};
				};
			};
			buildConfigurationList = 6682877C1A893CC70038A1C4 /* Build configuration list for PBXProject "ClippingBezier" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = 668287781A893CC70038A1C4;
			productRefGroup = 668287861A893CE50038A1C4 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				66FD53071A894C5600E7B486 /* ClippingBezierTests */,
				664CC9AB1A8C1FED00E77887 /* ClippingBezier */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		664CC9A91A8C1FED00E77887 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				664CC9B41A8C1FED00E77887 /* BezierClipStatic-Info.plist in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		66FD53061A894C5600E7B486 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		664CC9AA1A8C1FED00E77887 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /usr/bin/python;
			shellScript = "# TAG: BUILD SCRIPT (do not remove this comment)\n# Build script generated using https://github.com/kstenerud/iOS-Universal-Framework Mk 8 (beta 2012-06-16)\nimport logging\n\n\n##############################################################################\n#\n# Configuration\n#\n##############################################################################\n\n# Select which kind of framework to build.\n#\n# Note: Due to issues with Xcode's build process, if you select\n#       'embeddedframework', it will still show the regular framework\n#       (as a symlink) along side of the embedded framework. Be sure to\n#       instruct your users to copy/move the embedded framework in this case!\n#\n# If your framework contains resources such as images, nibs, momds, plists,\n# zipfiles and such, choose 'embeddedframework'.\n#\n# If your framework contains no resources, choose 'framework'.\n#\nconfig_framework_type = 'framework'\n#config_framework_type = 'embeddedframework'\n\n# Open the build directory in Finder when the universal framework is\n# successfully built.\n#\n# This value can be overridden by setting the UFW_OPEN_BUILD_DIR env variable\n# to True or False.\n#\n# Recommended setting: True\n#\nconfig_open_build_dir = True\n\n# If true, ensures that all public headers are stored in the framework under\n# the same directory hierarchy as they were in the source tree.\n#\n# Xcode by default places all headers at the same top level, but every other\n# build tool in the known universe preserves directory structure. For simple\n# libraries it doesn't really matter much, but for ports of existing software\n# packages or for bigger libraries, it makes sense to have more structure.\n#\n# The default is set to \"False\" since that's what most Xcode users are used to.\n#\n# Recommended setting: True for deep hierarchy projects, False otherwise.\n#\nconfig_deep_header_hierarchy = False\n\n# Specify where the top of the public header hierarchy is. This path is\n# relative to the project's dir (PROJECT_DIR). You can reference environment\n# variables using templating syntax (e.g. \"${TARGET_NAME}/Some/Subdir\")\n#\n# NOTE: Only used if config_deep_header_hierarchy is True.\n#\n# If this is set to None, the script will attempt to figure out for itself\n# where the top of the header hierarchy is by looking for common path prefixes\n# in the public header files. This process can fail if:\n# - You only have one public header file.\n# - Your source header files don't all have a common root.\n#\n# A common approach is to use \"${TARGET_NAME}\", working under the assumption\n# that all of your header files share the common root of a directory under\n# your project with the same name as your target (which is the Xcode default).\n#\n# Recommended setting: \"${TARGET_NAME}\"\n#\nconfig_deep_header_top = \"${TARGET_NAME}\"\n\n# Warn when \"DerivedData\" is detected in any of the header, library, or\n# framework search paths. In almost all cases, references to directories under\n# DerivedData are added as a result of an Xcode bug and must be manually\n# removed.\n#\n# Recommended setting: True\n#\nconfig_warn_derived_data = True\n\n# Warn if no headers were marked public in this framework.\n#\n# Recommended setting: True\n#\nconfig_warn_no_public_headers = True\n\n# Cause the build to fail if any warnings are issued.\n#\n# Recommended setting: True\n#\nconfig_fail_on_warnings = True\n\n# Minimum log level\n#\n# Recommended setting: logging.INFO\n#\nconfig_log_level = logging.INFO\n\n\n##############################################################################\n#\n# Don't touch anything below here unless you know what you're doing.\n#\n##############################################################################\n\nimport collections\nimport json\nimport os\nimport re\nimport shlex\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport time\nimport traceback\n\n\n##############################################################################\n#\n# Globals\n#\n##############################################################################\n\nlog = logging.getLogger('UFW')\n\nissued_warnings = False\n\n\n##############################################################################\n#\n# Classes\n#\n##############################################################################\n\n# Allows the slave build to communicate with the master build.\n#\nclass BuildState:\n\n    def __init__(self):\n        self.reload()\n\n    def reset(self):\n        self.slave_platform = None\n        self.slave_architectures = []\n        self.slave_linked_archive_paths = []\n        self.slave_built_fw_path = None\n        self.slave_built_embedded_fw_path = None\n\n    def set_slave_properties(self, architectures,\n                             linked_archive_paths,\n                             built_fw_path,\n                             built_embedded_fw_path):\n        self.slave_platform = os.environ['PLATFORM_NAME']\n        self.slave_architectures = architectures\n        self.slave_linked_archive_paths = linked_archive_paths\n        self.slave_built_fw_path = built_fw_path\n        self.slave_built_embedded_fw_path = built_embedded_fw_path\n\n    def get_save_path(self):\n        return os.path.join(os.environ['PROJECT_TEMP_DIR'], \"ufw_build_state.json\")\n\n    def persist(self):\n        filename = self.get_save_path()\n        parent = os.path.dirname(filename)\n        if not os.path.isdir(parent):\n            os.makedirs(parent)\n        with open(filename, \"w\") as f:\n            f.write(json.dumps(self.__dict__))\n\n    def reload(self):\n        self.reset()\n        filename = self.get_save_path()\n        if os.path.exists(filename):\n            with open(filename, \"r\") as f:\n                new_dict = json.loads(f.read())\n                if new_dict is not None:\n                    self.__dict__ = dict(self.__dict__.items() + new_dict.items())\n\n\n# Holds information about the current project and build environment.\n#\nclass Project:\n\n    def __init__(self, filename):\n        sourcecode_types = ['sourcecode.c.c',\n                            'sourcecode.c.objc',\n                            'sourcecode.cpp.cpp',\n                            'sourcecode.cpp.objcpp',\n                            'sourcecode.asm.asm',\n                            'sourcecode.asm.llvm',\n                            'sourcecode.nasm']\n\n        self.build_state = BuildState()\n        self.project_data = self.load_from_file(filename)\n        self.target = filter(lambda x: x['name'] == os.environ['TARGET_NAME'], self.project_data['targets'])[0]\n        self.public_headers = self.get_build_phase_files('PBXHeadersBuildPhase', lambda x: x.get('settings', False) and x['settings'].get('ATTRIBUTES', False) and 'Public' in x['settings']['ATTRIBUTES'])\n        self.static_libraries = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'archive.ar' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.static_frameworks = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'wrapper.framework' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.compilable_sources = self.get_build_phase_files('PBXSourcesBuildPhase', lambda x: x['fileRef']['fileType'] in sourcecode_types)\n        self.header_paths = [os.path.join(*x['pathComponents']) for x in self.public_headers]\n\n        self.headers_dir = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['CONTENTS_FOLDER_PATH'], 'Headers')\n        self.libtool_path = os.path.join(os.environ['DT_TOOLCHAIN_DIR'], 'usr', 'bin', 'libtool')\n        self.project_filename = os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\")\n        self.local_exe_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])\n        self.local_architectures = os.environ['ARCHS'].split(' ')\n        self.local_built_fw_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['WRAPPER_NAME'])\n        self.local_built_embedded_fw_path = os.path.splitext(self.local_built_fw_path)[0] + \".embeddedframework\"\n        self.local_linked_archive_paths = [self.get_linked_ufw_archive_path(arch) for arch in self.local_architectures]\n        self.local_platform = os.environ['PLATFORM_NAME']\n        other_platforms = os.environ['SUPPORTED_PLATFORMS'].split(' ')\n        other_platforms.remove(self.local_platform)\n        self.other_platform = other_platforms[0]\n\n        sdk_name = os.environ['SDK_NAME']\n        if not sdk_name.startswith(self.local_platform):\n            raise Exception(\"%s didn't start with %s\" % (sdk_name, self.local_platform))\n        self.sdk_version = sdk_name[len(self.local_platform):]\n\n    # Load an Xcode project file.\n    #\n    def load_from_file(self, filename):\n        project_file = json.loads(subprocess.check_output([\"plutil\", \"-convert\", \"json\", \"-o\", \"-\", filename]))\n        all_objects = project_file['objects']\n        del project_file['objects']\n        for obj in all_objects.values():\n            self.fix_keys(obj)\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, project_file))\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, all_objects.values()))\n        project_data = project_file['rootObject']\n        self.build_full_paths(project_data, splitpath(os.environ['SOURCE_ROOT']))\n        return project_data\n\n    def is_key(self, obj):        \n        return isinstance(obj, basestring) and len(obj) == 24 and re.search('^[0-9a-fA-F]+$', obj) is not None\n    \n    def build_dereference_list(self, all_objects, parent, key, obj):\n        deref_list = []\n        if self.is_key(obj):\n            dereferenced = all_objects.get(obj, obj)\n            if dereferenced is not obj:\n                deref_list.append((parent, key, obj, dereferenced))\n        elif isinstance(obj, collections.Mapping):\n            for k, v in obj.iteritems():\n                deref_list += self.build_dereference_list(all_objects, obj, k, v)\n        elif isinstance(obj, collections.Iterable) and not isinstance(obj, basestring):\n            for item in obj:\n                deref_list += self.build_dereference_list(all_objects, obj, None, item)\n        return deref_list\n    \n    def unpack_objects(self, deref_list):\n        for parent, key, orig, obj in deref_list:\n            if key is None:\n                parent.remove(orig)\n                parent.append(obj)\n            else:\n                parent[key] = obj\n\n    # Store the full path, separated into components, to a node inside the node\n    # as \"pathComponents\". Also recurse into that node if it's a group.\n    #\n    def build_full_paths(self, node, base_path):\n        # Some nodes are relative to a different source tree, specified as an\n        # env variable.\n        if node.get('sourceTree', '<group>') != '<group>':\n            new_base_path = os.environ.get(node['sourceTree'], None)\n            if new_base_path:\n                base_path = splitpath(new_base_path)\n        # Add the current node's path, if any.\n        if node.get('path', False):\n            base_path = base_path + splitpath(node['path'])\n        node['pathComponents'] = base_path\n        # Recurse if this is a group.\n        if node['isa'] == 'PBXGroup':\n            for child in node['children']:\n                self.build_full_paths(child, base_path)\n        elif node['isa'] == 'PBXProject':\n            self.build_full_paths(node['mainGroup'], base_path)\n            self.build_full_paths(node['productRefGroup'], base_path)\n            for child in node['targets']:\n                self.build_full_paths(child, base_path)\n            projectRefs = node.get('projectReferences', None)\n            if projectRefs is not None:\n                for child in projectRefs[0].values():\n                    self.build_full_paths(child, base_path)\n\n    # Fix up any inconvenient keys.\n    #\n    def fix_keys(self, obj):\n        key_remappings = {'lastKnownFileType': 'fileType', 'explicitFileType': 'fileType'}\n        for key in list(set(key_remappings.keys()) & set(obj.keys())):\n            obj[key_remappings[key]] = obj[key]\n            del obj[key]\n\n    # Get the files from a build phase.\n    #\n    def get_build_phase_files(self, build_phase_name, filter_func):\n        build_phase = filter(lambda x: x['isa'] == build_phase_name, self.target['buildPhases'])[0]\n        build_files = filter(filter_func, build_phase['files'])\n        return [x['fileRef'] for x in build_files]\n\n    # Get the truncated paths of all headers that start with the specified\n    # relative path. Paths are read and returned as fully separated lists.\n    # e.g. ['Some', 'Path', 'To', 'A', 'Header'] with relative_path of\n    # ['Some', 'Path'] gets truncated to ['To', 'A', 'Header']\n    #\n    def movable_headers_relative_to(self, relative_path):\n        rel_path_length = len(relative_path)\n        result = filter(lambda path: len(path) >= rel_path_length and\n                                     path[:rel_path_length] == relative_path, self.header_paths)\n        return [path[rel_path_length:] for path in result]\n\n    # Get the full path to where a linkable archive (library or framework)\n    # is supposed to be.\n    #\n    def get_linked_archive_path(self, architecture):\n        return os.path.join(os.environ['OBJECT_FILE_DIR_%s' % os.environ['CURRENT_VARIANT']],\n                            architecture,\n                            os.environ['EXECUTABLE_NAME'])\n\n    # Get the full path to our custom linked archive of the project.\n    #\n    def get_linked_ufw_archive_path(self, architecture):\n        return self.get_linked_archive_path(architecture) + \".ufwbuild\"\n\n    # Get the full path to the executable of an archive.\n    #\n    def get_exe_path(self, node):\n        path = os.path.join(*node['pathComponents'])\n        if node['fileType'] == 'wrapper.framework':\n            # Frameworks are directories, so go one deeper\n            path = os.path.join(path, os.path.splitext(node['pathComponents'][-1])[0])\n        return path\n\n    # Get the path to the directory containing the archive.\n    #\n    def get_containing_path(self, node):\n        return os.path.join(*node['pathComponents'])\n    \n    def get_archive_search_paths(self):\n        log.info(\"Search paths = %s\" % set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries]))\n        return set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries])\n\n    # Command to link all objects of a single architecture.\n    #\n    def get_single_arch_link_command(self, architecture):\n        cmd = [self.libtool_path,\n               \"-static\",\n               \"-arch_only\", architecture,\n               \"-syslibroot\", os.environ['SDKROOT'],\n               \"-L%s\" % os.environ['TARGET_BUILD_DIR'],\n               \"-filelist\", os.environ['LINK_FILE_LIST_%s_%s' % (os.environ['CURRENT_VARIANT'], architecture)]]\n        if os.environ.get('OTHER_LDFLAGS', False):\n            cmd += [os.environ['OTHER_LDFLAGS']]\n        if os.environ.get('WARNING_LDFLAGS', False):\n            cmd += [os.environ['WARNING_LDFLAGS']]\n#        cmd += [\"-L%s\" % libpath for libpath in self.get_archive_search_paths()]\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", self.get_linked_ufw_archive_path(architecture)]\n        return cmd\n\n    # Command to link all local architectures for the current configuration\n    # into an archive. This reads all libraries + the UFW-built archives and\n    # overwrites the final product.\n    #\n    def get_local_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Command to link all architectures into a universal archive.\n    # This reads all UFW-built archives and overwrites the final product.\n    #\n    def get_all_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths + self.build_state.slave_linked_archive_paths\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Build up an environment for the slave process. This uses BUILD_ROOT\n    # and TEMP_ROOT to convert all environment variables to values suitable\n    # for the slave build environment so that xcodebuild doesn't try to build\n    # in the project directory under \"build\".\n    #\n    def get_slave_environment(self):\n        ignored = ['LD_MAP_FILE_PATH',\n        'HEADER_SEARCH_PATHS',\n        'LIBRARY_SEARCH_PATHS',\n        'FRAMEWORK_SEARCH_PATHS']\n        build_root = os.environ['BUILD_ROOT']\n        temp_root = os.environ['TEMP_ROOT']\n        newenv = {}\n        for key, value in os.environ.items():\n            if key not in ignored and not key.startswith('LINK_FILE_LIST_') and not key.startswith('LD_DEPENDENCY_'):\n                if build_root in value or temp_root in value:\n                    newenv[key] = value.replace(self.local_platform, self.other_platform)\n        return newenv\n\n    # Command to invoke xcodebuild on the slave platform.\n    #\n    def get_slave_project_build_command(self):\n        cmd = [\"xcodebuild\",\n               \"-project\",\n               os.environ['PROJECT_FILE_PATH'],\n               \"-target\",\n               os.environ['TARGET_NAME'],\n               \"-configuration\",\n               os.environ['CONFIGURATION'],\n               \"-sdk\",\n               self.other_platform + self.sdk_version]\n        cmd += [\"%s=%s\" % (key, value) for key, value in self.get_slave_environment().items()]\n        cmd += [\"UFW_MASTER_PLATFORM=\" + os.environ['PLATFORM_NAME']]\n        cmd += [os.environ['ACTION']]\n        return cmd\n\n\n\n##############################################################################\n#\n# Utility Functions\n#\n##############################################################################\n\n# Split a path into a list of path components.\n#\ndef splitpath(path, maxdepth=20):\n     (head, tail) = os.path.split(path)\n     return splitpath(head, maxdepth - 1) + [tail] if maxdepth and head and head != path else [ head or tail ]\n\n# Remove all subdirectories under a path.\n#\ndef remove_subdirs(path, ignore_files):\n    if os.path.exists(path):\n        for filename in filter(lambda x: x not in ignore_files, os.listdir(path)):\n            fullpath = os.path.join(path, filename)\n            if os.path.isdir(fullpath):\n                log.info(\"Remove %s\" % fullpath)\n                shutil.rmtree(fullpath)\n\n# Make whatever parent paths are necessary for a path to exist.\n#\ndef ensure_path_exists(path):\n    if not os.path.isdir(path):\n        os.makedirs(path)\n\n# Make whatever parent paths are necessary for a path's parent to exist.\n#\ndef ensure_parent_exists(path):\n    parent = os.path.dirname(path)\n    if not os.path.isdir(parent):\n        os.makedirs(parent)\n\n# Remove a file or dir if it exists.\n#\ndef remove_path(path):\n    if os.path.exists(path):\n        if os.path.isdir(path):\n            shutil.rmtree(path)\n        else:\n            os.remove(path)\n\n# Move a file or dir, replacing the destination if it exists.\n#\ndef move_file(src, dst):\n    if src == dst or not os.path.isfile(src):\n        return\n    log.info(\"Move %s to %s\" % (src, dst))\n    ensure_parent_exists(dst)\n    remove_path(dst)\n    shutil.move(src, dst)\n\n# Copy a file or dir, replacing the destination if it exists already.\n#\ndef copy_overwrite(src, dst):\n    if src != dst:\n        remove_path(dst)\n        ensure_parent_exists(dst)\n        shutil.copytree(src, dst, symlinks=True)\n\n# Attempt to symlink link_path -> link_to.\n# link_to must be a path relative to link_path's parent and must exist.\n# If link_path already exists, do nothing.\n#\ndef attempt_symlink(link_path, link_to):\n    # Only allow linking to an existing file\n    os.stat(os.path.abspath(os.path.join(link_path, \"..\", link_to)))\n\n    # Only make the link if it hasn't already been made\n    if not os.path.exists(link_path):\n        log.info(\"Symlink %s -> %s\" % (link_path, link_to))\n        os.symlink(link_to, link_path)\n\n# Takes the last entry in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef top_level_file_path(base_path, path_list):\n    return os.path.join(base_path, os.path.split(path_list[-1])[-1])\n\n# Takes all entries in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef full_file_path(base_path, path_list):\n    return os.path.join(*([base_path] + path_list))\n\n# Print a command before executing it.\n# Also print out all output from the command to STDOUT.\n#\ndef print_and_call(cmd):\n    log.info(\"Cmd \" + \" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0]\n    if len(result) > 0:\n        log.info(result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Special print-and-call command for the slave build that strips out\n# xcodebuild's spammy list of environment variables.\n#\ndef print_and_call_slave_build(cmd, other_platform):\n    separator = '=== BUILD NATIVE TARGET '\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0].split(separator)\n    if len(result) == 1:\n        result = result[0]\n    else:\n        result = separator + result[1]\n    log.info(\"Cmd \" + \" \".join(cmd) + \"\\n\" + result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Issue a warning and record that a warning has been issued.\n#\ndef issue_warning(msg, *args, **kwargs):\n    global issued_warnings\n    issued_warnings = True\n    log.warn(msg, *args, **kwargs)\n\n\n\n##############################################################################\n#\n# Main Application\n#\n##############################################################################\n\n# Check if we are running as master.\n#\ndef is_master():\n    return os.environ.get('UFW_MASTER_PLATFORM', os.environ['PLATFORM_NAME']) == os.environ['PLATFORM_NAME']\n\n# DerivedData should almost never appear in any framework, library, or header\n# search paths. However, Xcode will sometimes add them in, so we check to make\n# sure.\n#\ndef check_for_derived_data_in_search_paths(project):\n    search_path_keys = [\"FRAMEWORK_SEARCH_PATHS\", \"LIBRARY_SEARCH_PATHS\", \"HEADER_SEARCH_PATHS\"]\n    build_configs = project.target['buildConfigurationList']['buildConfigurations']\n    build_settings = filter(lambda x: x['name'] == os.environ['CONFIGURATION'], build_configs)[0]['buildSettings']\n    \n    found_something = False\n    for path_key in filter(lambda x: x in build_settings, search_path_keys):\n        path = build_settings[path_key]\n        if \"DerivedData\" in path:\n            found_something = True\n            log.warn(\"Derived data in %s\" % path)\n            issue_warning(\"'%s' contains reference to 'DerivedData'.\" % path_key)\n    if found_something:\n        log.warn(\"Check your build settings and remove any entries that contain paths inside the DerivedData folder.\")\n        log.warn(\"Otherwise you can disable this warning by changing 'config_warn_derived_data' in this script.\")\n\n# Link local architectures into their respective archives.\n#\ndef link_local_archs(project):\n    for arch in project.local_architectures:\n        print_and_call(project.get_single_arch_link_command(arch))\n\n# Link only the local architectures into the final product, not the slave\n# architectures. For iphoneos, this will be armv6, armv7. For simulator, this\n# will be i386.\n#\ndef link_combine_local_archs(project):\n    print_and_call(project.get_local_archs_link_command())\n\n# Link all architectures into the final product.\n#\ndef link_combine_all_archs(project):\n    print_and_call(project.get_all_archs_link_command())\n\n# Check if we should open the build directory after a successful build.\n#\ndef should_open_build_dir():\n    env_setting = os.environ.get('UFW_OPEN_BUILD_DIR', None)\n    if env_setting is not None:\n        return env_setting\n\n    return config_open_build_dir\n\n# Open the build dir in Finder.\n#\ndef open_build_dir():\n    print_and_call(['open', os.environ['TARGET_BUILD_DIR']])\n\n# Check if the build was started by selecting \"Archive\" under \"Product\" in\n# Xcode.\n#\ndef is_archive_build():\n    # ACTION is always 'build', but perhaps Apple will fix this someday?\n    archive_build = os.environ['ACTION'] == 'archive'\n\n    if not archive_build:\n        # This can be passed in as an env variable when building from command line.\n        archive_build = os.environ.get('UFW_ACTION', None) == 'archive'\n\n    build_dir = splitpath(os.environ['BUILD_DIR'])\n    if not archive_build:\n        # This partial path is used when you select \"archive\" from within Xcode.\n        archive_build = 'ArchiveIntermediates' in build_dir\n\n    # It only counts as a full archive build if this target is being built into\n    # its own build dir (not being built as a dependency of another target)\n    if archive_build:\n        archive_build = os.environ['TARGET_NAME'] in build_dir\n    \n    return archive_build\n\n# Xcode by default throws all public headers into the top level directory.\n# This function moves them to their expected deep hierarchy.\n#\ndef build_deep_header_hierarchy(project):\n    header_path_top = config_deep_header_top\n    if not header_path_top:\n        header_path_top = os.path.commonprefix(project.header_paths)\n    else:\n        header_path_top = splitpath(header_path_top)\n\n    built_headers_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['PUBLIC_HEADERS_FOLDER_PATH'])\n    movable_headers = project.movable_headers_relative_to(header_path_top)\n\n    # Remove subdirs if they only contain files that have been rebuilt\n    ignore_headers = filter(lambda x: not os.path.isfile(top_level_file_path(built_headers_path, x)), movable_headers)\n    remove_subdirs(built_headers_path, [file[0] for file in ignore_headers])\n\n    # Move rebuilt headers into their proper subdirs\n    for header in movable_headers:\n        move_file(top_level_file_path(built_headers_path, header), full_file_path(built_headers_path, header))\n\n# Add all symlinks needed to make a full framework structure:\n#\n# MyFramework.framework\n# |-- MyFramework -> Versions/Current/MyFramework\n# |-- Headers -> Versions/Current/Headers\n# |-- Resources -> Versions/Current/Resources\n# `-- Versions\n#     |-- A\n#     |   |-- MyFramework\n#     |   |-- Headers\n#     |   |   `-- MyFramework.h\n#     |   `-- Resources\n#     |       |-- Info.plist\n#     |       |-- MyViewController.nib\n#     |       `-- en.lproj\n#     |           `-- InfoPlist.strings\n#     `-- Current -> A\n#\ndef add_symlinks_to_framework(project):\n    base_dir = project.local_built_fw_path\n    attempt_symlink(os.path.join(base_dir, \"Versions\", \"Current\"), os.environ['FRAMEWORK_VERSION'])\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Headers\")):\n        attempt_symlink(os.path.join(base_dir, \"Headers\"), os.path.join(\"Versions\", \"Current\", \"Headers\"))\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Resources\")):\n        attempt_symlink(os.path.join(base_dir, \"Resources\"), os.path.join(\"Versions\", \"Current\", \"Resources\"))\n    attempt_symlink(os.path.join(base_dir, os.environ['EXECUTABLE_NAME']), os.path.join(\"Versions\", \"Current\", os.environ['EXECUTABLE_NAME']))\n\n# Build an embedded framework structure.\n# An embedded framework contains the actual framework, plus a \"Resources\"\n# directory containing symlinks to all resources found in the actual framework,\n# with the exception of \"Info.plist\" and anything ending in \".lproj\":\n#\n# MyFramework.embeddedframework\n# |-- MyFramework.framework\n# |   |-- MyFramework -> Versions/Current/MyFramework\n# |   |-- Headers -> Versions/Current/Headers\n# |   |-- Resources -> Versions/Current/Resources\n# |   `-- Versions\n# |       |-- A\n# |       |   |-- MyFramework\n# |       |   |-- Headers\n# |       |   |   `-- MyFramework.h\n# |       |   `-- Resources\n# |       |       |-- Info.plist\n# |       |       |-- MyViewController.nib\n# |       |       `-- en.lproj\n# |       |           `-- InfoPlist.strings\n# |       `-- Current -> A\n# `-- Resources\n#     `-- MyViewController.nib -> ../MyFramework.framework/Resources/MyViewController.nib\n#\ndef build_embedded_framework(project):\n    fw_path = project.local_built_fw_path\n    embedded_path = project.local_built_embedded_fw_path\n    fw_name = os.environ['WRAPPER_NAME']\n    remove_path(embedded_path)\n    ensure_path_exists(embedded_path)\n    copy_overwrite(fw_path, os.path.join(embedded_path, fw_name))\n    ensure_path_exists(os.path.join(embedded_path, \"Resources\"))\n    symlink_source = os.path.join(\"..\", fw_name, \"Resources\")\n    symlink_path = os.path.join(embedded_path, \"Resources\")\n    if os.path.isdir(os.path.join(fw_path, \"Resources\")):\n        for file in filter(lambda x: x != \"Info.plist\" and not x.endswith(\".lproj\"), os.listdir(os.path.join(fw_path, \"Resources\"))):\n            attempt_symlink(os.path.join(symlink_path, file), os.path.join(symlink_source, file))\n\n    # Remove the normal framework and replace it with a symlink to the copy\n    # in the embedded framework. This is needed because Xcode runs its strip\n    # phase AFTER the script runs.\n    embed_fw_wrapper = os.path.splitext(os.environ['WRAPPER_NAME'])[0] + \".embeddedframework\"\n    remove_path(fw_path)\n    attempt_symlink(fw_path, os.path.join(embed_fw_wrapper, os.environ['WRAPPER_NAME']))\n\n\n# Run the build process in slave mode to build the other configuration\n# (device/simulator).\n#\ndef run_slave_build(project):\n    print_and_call_slave_build(project.get_slave_project_build_command(), project.other_platform)\n\n# Run the build process.\n#\ndef run_build():\n    project = Project(os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\"))\n\n    # Issue warnings only if we're master.\n    if is_master():\n        if len(project.compilable_sources) == 0:\n            raise Exception(\"No compilable sources found. Please add at least one source file to build target %s.\" % os.environ['TARGET_NAME'])\n\n        if config_warn_derived_data:\n            check_for_derived_data_in_search_paths(project)\n        if config_warn_no_public_headers and len(project.public_headers) == 0:\n            issue_warning('No headers in build target %s were marked public. Please move at least one header to \"Public\" in the \"Copy Headers\" build phase.' % os.environ['TARGET_NAME'])\n\n    # Only build slave if this is an archive build.\n    if is_archive_build():\n        if is_master():\n            log.debug(\"Building as MASTER\")\n            # The slave-side linker tries to include this (nonexistent) path as\n            # a library path.\n            ensure_path_exists(project.get_slave_environment()['BUILT_PRODUCTS_DIR'])\n            project.build_state.persist()\n            run_slave_build(project)\n            project.build_state.reload()\n        else:\n            log.debug(\"Building as SLAVE\")\n            project.build_state.reload()\n            project.build_state.set_slave_properties(project.local_architectures,\n                                                     project.local_linked_archive_paths,\n                                                     project.local_built_fw_path,\n                                                     project.local_built_embedded_fw_path)\n            project.build_state.persist()\n\n    link_local_archs(project)\n    \n    # Only do a universal binary when building an archive.\n    if is_archive_build() and is_master():\n        link_combine_all_archs(project)\n    else:\n        link_combine_local_archs(project)\n\n    if config_deep_header_hierarchy:\n        build_deep_header_hierarchy(project)\n\n    add_symlinks_to_framework(project)\n    \n    if is_master():\n        if config_framework_type == 'embeddedframework':\n            build_embedded_framework(project)\n        elif config_framework_type != 'framework':\n            raise Exception(\"%s: Unknown framework type for config_framework_type\" % config_framework_type)\n\n\nif __name__ == \"__main__\":\n    log_handler = logging.StreamHandler()\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n    log.addHandler(log_handler)\n    log.setLevel(config_log_level)\n\n    error_code = 0\n    prefix = \"M\" if is_master() else \"S\"\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + prefix + \" \" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n\n    log.debug(\"Begin build process\")\n\n    if config_deep_header_top:\n        config_deep_header_top = string.Template(config_deep_header_top).substitute(os.environ)\n\n    try:\n        run_build()\n        if issued_warnings:\n            if config_fail_on_warnings:\n                error_code = 1\n            log.warn(\"Build completed with warnings\")\n        else:\n            log.info(\"Build completed\")\n        if not is_archive_build():\n            log.info(\"Note: This is *NOT* a universal framework build. To build as a universal framework, do an archive build.\")\n            log.info(\"To do an archive build from command line, use \\\"xcodebuild -configuration Release UFW_ACTION=archive clean build\\\"\")\n    except Exception:\n        traceback.print_exc(file=sys.stdout)\n        error_code = 1\n        log.error(\"Build failed\")\n    finally:\n        if error_code == 0 and is_archive_build() and is_master():\n            log.info(\"Built framework is in \" + os.environ['TARGET_BUILD_DIR'])\n            if should_open_build_dir():\n                open_build_dir()\n        sys.exit(error_code)\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		664CC9A61A8C1FED00E77887 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				664CC9B81A8C1FED00E77887 /* BezierClipStatic.m in Sources */,
				664CC9CE1A8C200C00E77887 /* UIBezierPath+Clipping.mm in Sources */,
				664CC9CF1A8C200C00E77887 /* UIBezierPath+GeometryExtras.m in Sources */,
				664CC9D31A8C201100E77887 /* DKVector.m in Sources */,
				664CC9D41A8C201100E77887 /* JRSwizzle.m in Sources */,
				664CC9D51A8C201100E77887 /* MMBackwardCompatible.m in Sources */,
				664CC9D01A8C200C00E77887 /* UIBezierPath+DKOSX.m in Sources */,
				664CC9D11A8C200D00E77887 /* UIBezierPath+Intersections.m in Sources */,
				664CC9D21A8C200D00E77887 /* NSArray+FirstObject.m in Sources */,
				664CC9C61A8C200900E77887 /* DKUIBezierPathClippedSegment.m in Sources */,
				664CC9C71A8C200900E77887 /* DKUIBezierPathClippingResult.m in Sources */,
				664CC9C81A8C200900E77887 /* DKUIBezierPathIntersectionPoint.m in Sources */,
				664CC9C91A8C200900E77887 /* DKUIBezierUnmatchedPathIntersectionPoint.m in Sources */,
				664CC9CA1A8C200900E77887 /* DKUIBezierPathShape.m in Sources */,
				664CC9CB1A8C200900E77887 /* DKTangentAtPoint.m in Sources */,
				664CC9CC1A8C200900E77887 /* MMFooBar.m in Sources */,
				664CC9CD1A8C200900E77887 /* DKIntersectionOfPaths.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		66FD53041A894C5600E7B486 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				66FD53221A894C7A00E7B486 /* DrawKitiOSClippingSegmentTests.m in Sources */,
				66FD53281A894C7A00E7B486 /* DrawKitiOSFlatTests.m in Sources */,
				66FD53211A894C7A00E7B486 /* DrawKitiOSClippingIntersectionTests.m in Sources */,
				66FD532B1A89512200E7B486 /* DrawKitiOSFastFlatTests.m in Sources */,
				66FD53261A894C7A00E7B486 /* DrawKitiOSReverseBezierTests.m in Sources */,
				66FD53201A894C7A00E7B486 /* DrawKitiOSAbstractTest.m in Sources */,
				66FD53231A894C7A00E7B486 /* DrawKitiOSClippingSegmentTangentTests.m in Sources */,
				66FD531F1A894C7A00E7B486 /* DrawKitiOSAOOTests.mm in Sources */,
				66FD53251A894C7A00E7B486 /* DrawKitiOSClippingSubshapeTests.m in Sources */,
				66FD53241A894C7A00E7B486 /* DrawKitiOSClippingPerformanceTests.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin XCBuildConfiguration section */
		664CC9BA1A8C1FED00E77887 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				FRAMEWORK_SEARCH_PATHS = "$(inherited)";
				FRAMEWORK_VERSION = A;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				INFOPLIST_FILE = BezierClipStatic/Info.plist;
				MTL_ENABLE_DEBUG_INFO = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Debug;
		};
		664CC9BB1A8C1FED00E77887 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = YES;
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				FRAMEWORK_SEARCH_PATHS = "$(inherited)";
				FRAMEWORK_VERSION = A;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				INFOPLIST_FILE = BezierClipStatic/Info.plist;
				MTL_ENABLE_DEBUG_INFO = NO;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				WRAPPER_EXTENSION = framework;
			};
			name = Release;
		};
		6682877D1A893CC70038A1C4 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				IPHONEOS_DEPLOYMENT_TARGET = 8.0;
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		6682877E1A893CC70038A1C4 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				IPHONEOS_DEPLOYMENT_TARGET = 8.0;
				SDKROOT = iphoneos;
			};
			name = Release;
		};
		66FD53121A894C5600E7B486 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
				);
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				INFOPLIST_FILE = BezierClipTests/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks @loader_path/Frameworks";
				MTL_ENABLE_DEBUG_INFO = YES;
				OTHER_LDFLAGS = (
					"-ObjC++",
					"-lstdc++",
					"$(inherited)",
					"-framework",
					XCTest,
				);
				PRODUCT_NAME = ClippingBezierTests;
			};
			name = Debug;
		};
		66FD53131A894C5600E7B486 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				CODE_SIGN_IDENTITY = "iPhone Developer";
				COPY_PHASE_STRIP = YES;
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
				);
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				INFOPLIST_FILE = BezierClipTests/Info.plist;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks @loader_path/Frameworks";
				MTL_ENABLE_DEBUG_INFO = NO;
				OTHER_LDFLAGS = (
					"-ObjC++",
					"-lstdc++",
					"$(inherited)",
					"-framework",
					XCTest,
				);
				PRODUCT_NAME = ClippingBezierTests;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		664CC9B91A8C1FED00E77887 /* Build configuration list for PBXNativeTarget "ClippingBezier" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				664CC9BA1A8C1FED00E77887 /* Debug */,
				664CC9BB1A8C1FED00E77887 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		6682877C1A893CC70038A1C4 /* Build configuration list for PBXProject "ClippingBezier" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				6682877D1A893CC70038A1C4 /* Debug */,
				6682877E1A893CC70038A1C4 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		66FD53111A894C5600E7B486 /* Build configuration list for PBXNativeTarget "ClippingBezierTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				66FD53121A894C5600E7B486 /* Debug */,
				66FD53131A894C5600E7B486 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 668287791A893CC70038A1C4 /* Project object */;
}
